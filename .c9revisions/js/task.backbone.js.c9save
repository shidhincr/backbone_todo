{"ts":1348212599248,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\r\n * Task model is the default model by extending the backbone model\r\n * by default we neeed to have text , completed and important properties for our Task model.\r\n */\r\n(function($){\r\n\r\n    window.Task = Backbone.Model.extend({\r\n        defaults : {\r\n             text:'Blank task !'\r\n            ,completed : false\r\n            ,important: false\r\n        }\r\n     });\r\n    /*\r\n     * Create and make the TaskView object as global.\r\n     * The TaskView is responsible for rendering a single task model. All the buttons\r\n     * for marking important/completed/delete will be part of this view.\r\n     * TODO : editing should be done as a different view. As of now it's implemented in TaskView only.\r\n     * TODO : put this under a namespace\r\n     */\r\n    window.TaskView = Backbone.View.extend({\r\n\r\n        /*\r\n         * We need a div element to be returned with className \"task\".\r\n         * By default Backbone will return a 'div' tag unless the tagName is provided. \r\n         */\r\n        className: \"task\"\r\n\r\n        /*\r\n         * This method will get called whenever the view is instantiated.\r\n         * cache the template to a property , so that we can  use it later.\r\n         * attach the event handlers for the models.\r\n         * finally --  we need to call the render method explicitly \r\n         */\r\n        ,initialize : function(){\r\n            this.template = _.template( $(\"#taskTemplate\").html() );\r\n            this.model.on(\"change\" , this.render , this );\r\n            this.model.on(\"destroy\" , this.remove , this );\r\n            this.render();\r\n        }\r\n        /*\r\n         * Backbone's beautiful way of attaching the events to the dom.\r\n         * Backbone uses its underlying framework's delegate method to attach the events. The \r\n         * framework can be anything like jQuery/Zepto or Underscore itself.\r\n         * Good thing is that -- events will be attached if there is a selector provided. Else the events will be\r\n         * attached to the parent DIV which Backbone return when the view is created.\r\n         */\r\n        ,events : {\r\n             \"click .delete\" : \"deleteTask\"\r\n            ,\"click .imp\" : \"toggleImportant\"\r\n            ,\"click .mark\" : \"toggleDone\"\r\n            ,\"blur .text-edit\" : \"updateTask\"\r\n            ,\"keyup .text-edit\" : \"onkeyEnter\"\r\n            ,\"dblclick\" : \"editTask\"\r\n        }\r\n\r\n        ,render : function(){\r\n            this.$el.fadeOut(\"fast\").html( this.template(this.model.toJSON() )).fadeIn();\r\n            return this;\r\n        }\r\n        /*\r\n         * convenient function to remove the element from the DOM.\r\n         * Should not call directly.\r\n         */\r\n        ,remove : function(){\r\n            this.$el.remove();\r\n        }\r\n        /*\r\n         * TODO :  This should go to a separate view\r\n         * something like \"EditTaskView\" ,  which should get called \r\n         * when the start editing the task details\r\n         */\r\n        ,editTask : function( e ){\r\n            this.$el.find(\".text.open\").hide();\r\n            this.$el.find(\".text-edit\").show().focus();\r\n            e.preventDefault();\r\n        }\r\n        /*\r\n         * Basic keyboard support \r\n         * When ENTER key is pressed when editing  the task, it should get updated.\r\n         */\r\n        ,onkeyEnter :function( e ){\r\n            if(e.keyCode === 13){\r\n                this.updateTask();\r\n            }\r\n        }\r\n        /*\r\n         * validate and update the task\r\n         * Backbone  provides an excellent way of validating the model data.\r\n         * \r\n         */\r\n        ,updateTask: function(){\r\n            var newdesc = this.$el.find(\".text-edit\").val();\r\n            if( $.trim( newdesc ) !== \"\" ){\r\n                this.model.save({ text: newdesc });\r\n            }\r\n            this.render();\r\n        }\r\n\r\n        ,deleteTask : function(e){\r\n            this.model.destroy();\r\n            e.preventDefault();\r\n        }\r\n\r\n        ,toggleImportant : function(e){\r\n            var imp = this.model.get(\"important\");\r\n            this.model.save(\"important\", !imp);\r\n            e.preventDefault();\r\n        }\r\n\r\n        ,toggleDone : function(e){\r\n            var done = this.model.get(\"completed\");\r\n            this.model.save(\"completed\", !done);\r\n            e.preventDefault();\r\n        }\r\n    });\r\n\r\n\r\n}(jQuery));\r\n"]],"start1":0,"start2":0,"length1":0,"length2":4308}]],"length":4308}
